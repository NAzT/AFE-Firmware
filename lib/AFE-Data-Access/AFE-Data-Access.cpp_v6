/* AFE Firmware for smart home devices
  LICENSE: https://github.com/tschaban/AFE-Firmware/blob/master/LICENSE
  DOC: http://smart-house.adrian.czabanowski.com/afe-firmware-pl/ */

#include "AFE-Data-Access.h"

AFEDataAccess::AFEDataAccess() {}

const String AFEDataAccess::getDeviceUID() {
  String uid;

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-device-uid.json : ";
#endif

  File configFile = SPIFFS.open("cfg-device-uid.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<30> doc;
    DeserializationError error = deserializeJson(doc, configFile);

    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif
      uid = doc["uid"].as<String>();
#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif
  return uid;
}
void AFEDataAccess::saveDeviceUID(const char *uid) {
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-device-uid.json : ";
#endif

  File configFile = SPIFFS.open("cfg-device-uid.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<30> doc;

    doc["uid"] = uid;
    serializeJson(doc, configFile);

#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}

PRO_VERSION AFEDataAccess::getProVersionConfiguration() {
  PRO_VERSION configuration;

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-pro-version.json : ";
#endif

  File configFile = SPIFFS.open("cfg-pro-version.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<50> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif
      configuration.valid = doc["valid"].as<bool>();
      sprintf(configuration.serial, doc["serial"].as<char *>());
#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif

  return configuration;
}
void AFEDataAccess::saveConfiguration(PRO_VERSION configuration) {
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-pro-version.json : ";
#endif

  File configFile = SPIFFS.open("cfg-pro-version.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<65> doc;

    doc["valid"] = configuration.valid;
    doc["serial"] = configuration.serial;

    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}

PASSWORD AFEDataAccess::getPasswordConfiguration() {
  PASSWORD configuration;

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-password.json : ";
#endif

  File configFile = SPIFFS.open("cfg-password.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<80> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif
      configuration.protect = doc["protect"].as<bool>();
      sprintf(configuration.password, doc["password"].as<char *>());

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif
  return configuration;
}
void AFEDataAccess::saveConfiguration(PASSWORD configuration) {
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-password.json : ";
#endif

  File configFile = SPIFFS.open("cfg-password.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<80> doc;

    doc["protect"] = configuration.protect;
    doc["password"] = configuration.password;
    serializeJson(doc, configFile);

#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}

DEVICE AFEDataAccess::getDeviceConfiguration() {
  DEVICE configuration;
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-device.json : ";
#endif

  File configFile = SPIFFS.open("cfg-device.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<400> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif
      sprintf(configuration.name, doc["name"].as<char *>());
      configuration.api.http = doc["api"]["http"].as<bool>();
      configuration.api.mqtt = doc["api"]["mqtt"].as<bool>();
      configuration.api.domoticz = doc["api"]["domoticz"].as<bool>();

      for (uint8_t i = 0; i < sizeof(configuration.isLED); i++) {
        configuration.isLED[i] = doc["led"][i].as<bool>();
      }

      for (uint8_t i = 0; i < sizeof(configuration.isSwitch); i++) {
        configuration.isSwitch[i] = doc["switch"][i].as<bool>();
      }

      for (uint8_t i = 0; i < sizeof(configuration.isRelay); i++) {
        configuration.isRelay[i] = doc["relay"][i].as<bool>();
      }

#ifdef CONFIG_HARDWARE_ADC_VCC
      configuration.isAnalogInput = doc["isAnalogInput"].as<bool>();
#endif

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif

  return configuration;
  /*
   Eeprom.read(9, 16).toCharArray(configuration.name,
                                  sizeof(configuration.name));


   configuration.api.http = Eeprom.read(25);
   configuration.api.mqtt = Eeprom.read(228);
   configuration.api.domoticz = Eeprom.read(800);


 #if defined(T0_CONFIG)
   configuration.isLED[0] = Eeprom.read(366);
   configuration.isLED[1] = Eeprom.read(418);
   configuration.isSwitch[1] = Eeprom.read(402);
 #endif


 #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
   configuration.isRelay[0] = Eeprom.read(369);
   configuration.isSwitch[0] = Eeprom.read(395);
 #endif


 #if defined(T1_CONFIG) || defined(T2_CONFIG) || defined(T3_CONFIG) || \
     defined(T4_CONFIG) || defined(T5_CONFIG) || defined(T6_CONFIG)

 #if defined(T1_CONFIG)
   uint8_t index = 77;
 #elif defined(T2_CONFIG)
   uint8_t index = 98;
 #elif defined(T3_CONFIG) || defined(T4_CONFIG) || defined(T5_CONFIG) || \
     defined(T6_CONFIG)
   uint8_t index = 3;
 #endif

   for (uint8_t i = 0; i < sizeof(configuration.isLED); i++) {
     configuration.isLED[i] = Eeprom.read(366 + i * index);
   }
 #endif


 #if defined(T1_CONFIG)
   index = 40;
   for (uint8_t i = 0; i < sizeof(configuration.isRelay); i++) {
     configuration.isRelay[i] = Eeprom.read(396 + i * index);
   }

   index = 7;
   for (uint8_t i = 0; i < sizeof(configuration.isSwitch); i++) {
     configuration.isSwitch[i] = Eeprom.read(382 + i * index);
   }
 #endif


 #if defined(T2_CONFIG)
   index = 0;
   for (uint8_t i = 0; i < sizeof(configuration.isRelay); i++) {
     configuration.isRelay[i] = Eeprom.read(404 + i * index);
   }

   index = 7;
   for (uint8_t i = 0; i < sizeof(configuration.isSwitch); i++) {
     configuration.isSwitch[i] = Eeprom.read(390 + i * index);
   }
 #endif


 #if defined(T3_CONFIG)
   index = 21;
   for (uint8_t i = 0; i < sizeof(configuration.isRelay); i++) {
     configuration.isRelay[i] = Eeprom.read(381 + i * index);
   }

   index = 7;
   for (uint8_t i = 0; i < sizeof(configuration.isSwitch); i++) {
     configuration.isSwitch[i] = Eeprom.read(470 + i * index);
   }

   index = 27;
   for (uint8_t i = 0; i < sizeof(configuration.isPIR); i++) {
     configuration.isPIR[i] = Eeprom.read(505 + i * index);
   }
 #endif


 #if defined(T4_CONFIG)
   index = 27;
   for (uint8_t i = 0; i < sizeof(configuration.isRelay); i++) {
     configuration.isRelay[i] = Eeprom.read(382 + i * index);
   }

   index = 8;
   for (uint8_t i = 0; i < sizeof(configuration.isSwitch); i++) {
     configuration.isSwitch[i] = Eeprom.read(490 + i * index);
   }
 #endif


 #if defined(T5_CONFIG)
   index = 8;

   configuration.isRelay[0] = true; // Relay must be present - hardcoded

   for (uint8_t i = 0; i < sizeof(configuration.isSwitch); i++) {
     configuration.isSwitch[i] = Eeprom.read(398 + i * index);
   }

   index = 24;
   for (uint8_t i = 0; i < sizeof(configuration.isContactron); i++) {
     configuration.isContactron[i] = Eeprom.read(414 + i * index);
   }
 #endif


 #if defined(T6_CONFIG)
   configuration.isRelay[0] = Eeprom.read(373);

   index = 8;
   for (uint8_t i = 0; i < sizeof(configuration.isSwitch); i++) {
     configuration.isSwitch[i] = Eeprom.read(395 + i * index);
   }

   configuration.isHPMA115S0 = Eeprom.read(413);
   configuration.isBMx80 = Eeprom.readUInt8(422);
   configuration.isBH1750 = Eeprom.read(429);

 #endif


 #if defined(T1_CONFIG) || defined(T2_CONFIG) || defined(T5_CONFIG)
 #if defined(T1_CONFIG)
   configuration.isDS18B20 = Eeprom.read(369);
 #elif defined(T2_CONFIG)
   configuration.isDHT = Eeprom.read(369);
 #else
   configuration.isDHT = Eeprom.read(376);
 #endif
 #endif
 */
}
void AFEDataAccess::saveConfiguration(DEVICE configuration) {

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-device.json : ";
#endif

  File configFile = SPIFFS.open("cfg-device.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<400> doc;

    doc["name"] = configuration.name;

    JsonObject jsonAPI = doc.createNestedObject("api");
    jsonAPI["http"] = configuration.api.http;
    jsonAPI["mqtt"] = configuration.api.mqtt;
    jsonAPI["domoticz"] = configuration.api.domoticz;

    JsonArray jsonLED = doc.createNestedArray("led");
    for (uint8_t i = 0; i < sizeof(configuration.isLED); i++) {
      jsonLED.add(configuration.isLED[i]);
    }

    JsonArray jsonSwitch = doc.createNestedArray("switch");
    for (uint8_t i = 0; i < sizeof(configuration.isSwitch); i++) {
      jsonSwitch.add(configuration.isSwitch[i]);
    }

    JsonArray jsonRelay = doc.createNestedArray("relay");
    for (uint8_t i = 0; i < sizeof(configuration.isRelay); i++) {
      jsonRelay.add(configuration.isRelay[i]);
    }

#ifdef CONFIG_HARDWARE_ADC_VCC
    doc["isAnalogInput"] = configuration.isAnalogInput;
#endif

    serializeJson(doc, configFile);

#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif

  /*
    uint8_t index;
    Eeprom.write(9, 16, configuration.name);

  #if defined(T3_CONFIG)
    index = 21;
  #elif defined(T4_CONFIG)
    index = 27;
  #endif

    for (uint8_t i = 0; i < sizeof(configuration.isRelay); i++) {
  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG) || defined(T5_CONFIG)
      Eeprom.write(369, configuration.isRelay[i]);
  #elif defined(T1_CONFIG)
      Eeprom.write(396, configuration.isRelay[i]);
  #elif defined(T2_CONFIG)
      Eeprom.write(404, configuration.isRelay[i]);
  #elif defined(T3_CONFIG)
      Eeprom.write(381 + i * index, configuration.isRelay[i]);
  #elif defined(T4_CONFIG)
      Eeprom.write(382 + i * index, configuration.isRelay[i]);
  #elif defined(T6_CONFIG)
      Eeprom.write(373, configuration.isRelay[i]);
  #endif
    }

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG) || defined(T1_CONFIG)
|| \ defined(T2_CONFIG) || defined(T3_CONFIG) index = 7; #elif
defined(T4_CONFIG)
  || defined(T5_CONFIG) || defined(T6_CONFIG) index = 8; #endif

    for (uint8_t i = 0; i < sizeof(configuration.isSwitch); i++) {
  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG) || defined(T6_CONFIG)
      Eeprom.write(395 + i * index, configuration.isSwitch[i]);
  #elif defined(T1_CONFIG)
      Eeprom.write(382 + i * index, configuration.isSwitch[i]);
  #elif defined(T2_CONFIG)
      Eeprom.write(390 + i * index, configuration.isSwitch[i]);
  #elif defined(T3_CONFIG)
      Eeprom.write(470 + i * index, configuration.isSwitch[i]);
  #elif defined(T4_CONFIG)
      Eeprom.write(490 + i * index, configuration.isSwitch[i]);
  #elif defined(T5_CONFIG)
      Eeprom.write(398 + i * index, configuration.isSwitch[i]);
  #endif
    }

  #ifdef CONFIG_HARDWARE_LED

  #if defined(T0_CONFIG)
    index = 52;
  #elif defined(T1_CONFIG)
    index = 77;
  #elif defined(T2_CONFIG)
    index = 98;
  #elif defined(T3_CONFIG) || defined(T4_CONFIG) || defined(T5_CONFIG) || \
      defined(T6_CONFIG)
    index = 3;
  #endif

    for (uint8_t i = 0; i < sizeof(configuration.isLED); i++) {
      Eeprom.write(366 + i * index, configuration.isLED[i]);
    }
  #endif

    saveAPI(API_MQTT, configuration.api.mqtt);
    saveAPI(API_HTTP, configuration.api.http);
    saveAPI(API_DOMOTICZ, configuration.api.domoticz);


  #if defined(T1_CONFIG) || defined(T2_CONFIG) || defined(T5_CONFIG)
  #if defined(T1_CONFIG)
    Eeprom.write(369, configuration.isDS18B20);
  #elif defined(T2_CONFIG)
    Eeprom.write(369, configuration.isDHT);
  #else

    Eeprom.write(376, configuration.isDHT);
    index = 24;
    for (uint8_t i = 0; i < sizeof(configuration.isContactron); i++) {
      Eeprom.write(414 + i * index, configuration.isContactron[i]);
    }
  #endif
  #endif

  #if defined(T3_CONFIG)
    index = 27;
    for (uint8_t i = 0; i < sizeof(configuration.isPIR); i++) {
      Eeprom.write(505 + i * index, configuration.isPIR[i]);
    }
  #endif

  #if defined(T6_CONFIG)
    Eeprom.write(413, configuration.isHPMA115S0);
    Eeprom.writeUInt8(422, configuration.isBMx80);
    Eeprom.write(429, configuration.isBH1750);
  #endif


  */
}

FIRMWARE AFEDataAccess::getFirmwareConfiguration() {
  FIRMWARE configuration;

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-firmware.json : ";
#endif

  File configFile = SPIFFS.open("cfg-firmware.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<100> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif
      configuration.type = doc["type"].as<unsigned short>();
      sprintf(configuration.version, doc["version"].as<char *>());
      sprintf(configuration.upgradeURL, doc["upgradeURL"].as<char *>());
      configuration.autoUpgrade = doc["autoUpgrade"].as<bool>();

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif

  return configuration;
}
void AFEDataAccess::saveConfiguration(FIRMWARE configuration) {
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-firmware.json : ";
#endif

  File configFile = SPIFFS.open("cfg-firmware.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<100> doc;

    doc["type"] = configuration.type;
    doc["version"] = configuration.version;
    doc["autoUpgrade"] = configuration.autoUpgrade;
    doc["upgradeURL"] = configuration.upgradeURL;
    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}

NETWORK AFEDataAccess::getNetworkConfiguration() {
  NETWORK configuration;

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-network.json : ";
#endif

  File configFile = SPIFFS.open("cfg-network.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<300> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif

      sprintf(configuration.ssid, doc["ssid"].as<char *>());
      sprintf(configuration.password, doc["password"].as<char *>());

      configuration.isDHCP = doc["isDHCP"].as<bool>();

      configuration.ip = IPfromString(doc["ip"]);
      configuration.gateway = IPfromString(doc["gateway"]);
      configuration.subnet = IPfromString(doc["subnet"]);

      configuration.noConnectionAttempts =
          doc["noConnectionAttempts"].as<unsigned short>();
      configuration.waitTimeConnections =
          doc["waitTimeConnections"].as<unsigned short>();
      configuration.waitTimeSeries = doc["waitTimeSeries"].as<unsigned short>();

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif

  return configuration;
}
void AFEDataAccess::saveConfiguration(NETWORK configuration) {
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-network.json : ";
#endif

  File configFile = SPIFFS.open("cfg-network.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<300> doc;

    doc["ssid"] = configuration.ssid;
    doc["password"] = configuration.password;
    doc["isDHCP"] = configuration.isDHCP;
    doc["ip"] = configuration.ip.toString();
    doc["gateway"] = configuration.gateway.toString();
    doc["subnet"] = configuration.subnet.toString();

    doc["noConnectionAttempts"] = configuration.noConnectionAttempts;
    doc["waitTimeConnections"] = configuration.waitTimeConnections;
    doc["waitTimeSeries"] = configuration.waitTimeSeries;

    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}

MQTT AFEDataAccess::getMQTTConfiguration() {
  MQTT configuration;

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-mqtt-broker.json : ";
#endif

  File configFile = SPIFFS.open("cfg-mqtt-broker.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<200> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif

      sprintf(configuration.host, doc["host"].as<char *>());

      configuration.ip = IPfromString(doc["ip"]);
      configuration.port = doc["port"].as<unsigned int>();
      sprintf(configuration.user, doc["user"].as<char *>());
      sprintf(configuration.password, doc["password"].as<char *>());
      sprintf(configuration.mqtt.topic, doc["topic"].as<char *>());

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif

  return configuration;
}
void AFEDataAccess::saveConfiguration(MQTT configuration) {
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-mqtt-broker.json : ";
#endif

  File configFile = SPIFFS.open("cfg-mqtt-broker.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<200> doc;

    doc["host"] = configuration.host;
    doc["ip"] = configuration.ip.toString();
    doc["port"] = configuration.port;
    doc["user"] = configuration.user;
    doc["password"] = configuration.password;
    doc["topic"] = configuration.mqtt.topic;

    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}

DOMOTICZ AFEDataAccess::getDomoticzConfiguration() {
  DOMOTICZ configuration;
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-domoticz-server.json : ";
#endif

  File configFile = SPIFFS.open("cfg-domoticz-server.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<200> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif

      configuration.protocol = doc["protocol"];
      sprintf(configuration.host, doc["host"].as<char *>());
      configuration.port = doc["port"].as<unsigned int>();
      sprintf(configuration.user, doc["user"].as<char *>());
      sprintf(configuration.password, doc["password"].as<char *>());

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif
  return configuration;
}
void AFEDataAccess::saveConfiguration(DOMOTICZ configuration) {
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-domoticz-server.json : ";
#endif

  File configFile = SPIFFS.open("cfg-domoticz-server.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<200> doc;

    doc["protocol"] = configuration.protocol;
    doc["host"] = configuration.host;
    doc["port"] = configuration.port;
    doc["user"] = configuration.user;
    doc["password"] = configuration.password;
    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}

#ifdef CONFIG_HARDWARE_LED
LED AFEDataAccess::getLEDConfiguration(uint8_t id) {
  LED configuration;

  char fileName[15];
  sprintf(fileName, "cfg-led-%d.json", id);

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: " << fileName << " : ";
#endif

  File configFile = SPIFFS.open(fileName, "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<50> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif

      configuration.gpio = doc["gpio"].as<unsigned char>();
      configuration.changeToOppositeValue =
          doc["changeToOppositeValue"].as<bool>();

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif
  return configuration;
}
void AFEDataAccess::saveConfiguration(uint8_t id, LED configuration) {
  char fileName[15];
  sprintf(fileName, "cfg-led-%d.json", id);

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: " << fileName << " : ";
#endif

  File configFile = SPIFFS.open(fileName, "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<50> doc;

    doc["gpio"] = configuration.gpio;
    doc["changeToOppositeValue"] = configuration.changeToOppositeValue;
    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}
#endif

RELAY AFEDataAccess::getRelayConfiguration(uint8_t id) {
  RELAY configuration;
  char fileName[17];
  sprintf(fileName, "cfg-relay-%d.json", id);

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: " << fileName << " : ";
#endif

  File configFile = SPIFFS.open(fileName, "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<200> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif

      configuration.gpio = doc["gpio"].as<unsigned char>();
      sprintf(configuration.name, doc["name"].as<char *>());
      configuration.timeToOff = doc["timeToOff"].as<float>();
      configuration.state.powerOn = doc["statePowerOn"].as<unsigned short>();
      configuration.state.MQTTConnected =
          doc["stateMQTTConnected"].as<unsigned short>();
      configuration.domoticz.idx = doc["idx"].as<unsigned long>();
      sprintf(configuration.mqtt.topic, doc["MQTTTopic"].as<char *>());
      configuration.ledID = doc["ledID"].as<unsigned short>();

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif
  /*
  #if defined(T3_CONFIG)
    uint8_t nextRelay = 21;
  #elif defined(T4_CONFIG)
    uint8_t nextRelay = 27;
  #endif

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
    configuration.gpio = Eeprom.readUInt8(370);
  #elif defined(T1_CONFIG)
    configuration.gpio = Eeprom.readUInt8(397);
  #elif defined(T2_CONFIG)
    configuration.gpio = Eeprom.readUInt8(405);
  #elif defined(T3_CONFIG)
    configuration.gpio = Eeprom.readUInt8(382 + id * nextRelay);
  #elif defined(T4_CONFIG)
    configuration.gpio = Eeprom.readUInt8(383 + id * nextRelay);
  #elif defined(T5_CONFIG)
    configuration.gpio = Eeprom.readUInt8(462);
  #elif defined(T6_CONFIG)
    configuration.gpio = Eeprom.readUInt8(374);
  #endif

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
    configuration.timeToOff = Eeprom.read(372, 5).toFloat();
  #elif defined(T1_CONFIG)
    configuration.timeToOff = Eeprom.read(399, 5).toFloat();
  #elif defined(T2_CONFIG)
    configuration.timeToOff = Eeprom.read(407, 5).toFloat();
  #elif defined(T4_CONFIG)
    configuration.timeToOff = Eeprom.read(385 + id * nextRelay, 5).toFloat();
  #elif defined(T5_CONFIG)
    configuration.timeToOff = Eeprom.read(463, 4).toInt();
  #endif


  #if !defined(T5_CONFIG)

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
    configuration.statePowerOn = Eeprom.readUInt8(377);
  #elif defined(T1_CONFIG)
    configuration.statePowerOn = Eeprom.readUInt8(404);
  #elif defined(T2_CONFIG)
    configuration.statePowerOn = Eeprom.readUInt8(412);
  #elif defined(T3_CONFIG)
    configuration.statePowerOn = Eeprom.readUInt8(384 + id * nextRelay);
  #elif defined(T4_CONFIG)
    configuration.statePowerOn = Eeprom.readUInt8(390 + id * nextRelay);
  #elif defined(T6_CONFIG)
    configuration.statePowerOn = Eeprom.readUInt8(376);
  #endif

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
    Eeprom.read(378, 16).toCharArray(configuration.name,
                                     sizeof(configuration.name));
  #elif defined(T1_CONFIG)
    Eeprom.read(405, 16).toCharArray(configuration.name,
                                     sizeof(configuration.name));
  #elif defined(T2_CONFIG)
    Eeprom.read(413, 16).toCharArray(configuration.name,
                                     sizeof(configuration.name));
  #elif defined(T3_CONFIG)
    Eeprom.read(385 + id * nextRelay, 16)
        .toCharArray(configuration.name, sizeof(configuration.name));
  #elif defined(T4_CONFIG)
    Eeprom.read(391 + id * nextRelay, 16)
        .toCharArray(configuration.name, sizeof(configuration.name));
  #elif defined(T6_CONFIG)
    Eeprom.read(377, 16).toCharArray(configuration.name,
                                     sizeof(configuration.name));
  #endif

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
    configuration.stateMQTTConnected = Eeprom.readUInt8(394);
  #elif defined(T1_CONFIG)
    configuration.stateMQTTConnected = Eeprom.readUInt8(421);
  #elif defined(T2_CONFIG)
    configuration.stateMQTTConnected = Eeprom.readUInt8(429);
  #elif defined(T3_CONFIG)
    configuration.stateMQTTConnected = Eeprom.readUInt8(401 + id * nextRelay);
  #elif defined(T4_CONFIG)
    configuration.stateMQTTConnected = Eeprom.readUInt8(407 + id * nextRelay);
  #elif defined(T6_CONFIG)
    configuration.stateMQTTConnected = Eeprom.readUInt8(393);
  #endif

    Eeprom.read(334, 32).toCharArray(configurationMQTT.topic,
                                     sizeof(configurationMQTT.topic));



  #if defined(T0_CONFIG)
    configuration.ledID = Eeprom.readUInt8(421);
  #elif defined(T1_CONFIG)
    configuration.ledID = Eeprom.readUInt8(442);
  #elif defined(T2_CONFIG)
    configuration.ledID = Eeprom.readUInt8(463);
  #elif defined(T3_CONFIG)
    configuration.ledID = Eeprom.readUInt8(618 + id);
  #elif defined(T4_CONFIG)
    configuration.ledID = Eeprom.readUInt8(531 + id);
  #elif defined(T6_CONFIG)
    configuration.ledID = Eeprom.readUInt8(394);
  #endif

  #if !defined(T6_CONFIG)
    configuration.idx = Eeprom.read(930 + 6 * id, 6).toInt();
  #else
    configuration.idx = Eeprom.read(920, 6).toInt();
  #endif

  #if defined(T1_CONFIG) || defined(T2_CONFIG)
  #if defined(T1_CONFIG)
    configuration.thermostat.turnOn = Eeprom.read(423, 5).toFloat();
    configuration.thermostat.turnOff = Eeprom.read(428, 5).toFloat();
    configuration.thermostat.turnOnAbove = Eeprom.read(433);
    configuration.thermostat.turnOffAbove = Eeprom.read(434);
    configuration.thermostat.enabled = isRegulatorEnabled(THERMOSTAT_REGULATOR);
  #else
    configuration.thermostat.turnOn = Eeprom.read(431, 5).toFloat();
    configuration.thermostat.turnOff = Eeprom.read(436, 5).toFloat();
    configuration.thermostat.turnOnAbove = Eeprom.read(441);
    configuration.thermostat.turnOffAbove = Eeprom.read(442);
    configuration.thermostat.enabled = isRegulatorEnabled(THERMOSTAT_REGULATOR);
  #endif
  #endif

  #if defined(T2_CONFIG)
    configuration.humidistat.turnOn = Eeprom.read(444, 5).toFloat();
    configuration.humidistat.turnOff = Eeprom.read(449, 5).toFloat();
    configuration.humidistat.turnOnAbove = Eeprom.read(454);
    configuration.humidistat.turnOffAbove = Eeprom.read(455);
    configuration.humidistat.enabled = isRegulatorEnabled(HUMIDISTAT_REGULATOR);
  #endif


  #if defined(T1_CONFIG)
    configuration.thermalProtection = Eeprom.read(436, 3).toInt();
  #elif defined(T2_CONFIG)
    configuration.thermalProtection = Eeprom.read(457, 3).toInt();
  #endif

  #endif
  */

  return configuration;
}
void AFEDataAccess::saveConfiguration(uint8_t id, RELAY configuration) {
  char fileName[17];
  sprintf(fileName, "cfg-relay-%d.json", id);

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: " << fileName << " : ";
#endif

  File configFile = SPIFFS.open(fileName, "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<200> doc;

    doc["gpio"] = configuration.gpio;
    doc["name"] = configuration.name;
    doc["timeToOff"] = configuration.timeToOff;
    doc["statePowerOn"] = configuration.state.powerOn;
    doc["stateMQTTConnected"] = configuration.state.MQTTConnected;
    doc["ledID"] = configuration.ledID;
    doc["idx"] = configuration.domoticz.idx;
    doc["MQTTTopic"] = configuration.mqtt.topic;

    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
  /*
  #if defined(T3_CONFIG)
    uint8_t nextRelay = 21;
  #elif defined(T4_CONFIG)
    uint8_t nextRelay = 27;
  #endif

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
    Eeprom.writeUInt8(370, configuration.gpio);
  #elif defined(T1_CONFIG)
    Eeprom.writeUInt8(397, configuration.gpio);
  #elif defined(T2_CONFIG)
    Eeprom.writeUInt8(405, configuration.gpio);
  #elif defined(T3_CONFIG)
    Eeprom.writeUInt8(382 + id * nextRelay, configuration.gpio);
  #elif defined(T4_CONFIG)
    Eeprom.writeUInt8(383 + id * nextRelay, configuration.gpio);
  #elif defined(T5_CONFIG)
    Eeprom.writeUInt8(462, configuration.gpio);
  #elif defined(T6_CONFIG)
    Eeprom.writeUInt8(374, configuration.gpio);
  #endif

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
    Eeprom.write(372, 5, configuration.timeToOff);
  #elif defined(T1_CONFIG)
    Eeprom.write(399, 5, configuration.timeToOff);
  #elif defined(T2_CONFIG)
    Eeprom.write(407, 5, configuration.timeToOff);
  #elif defined(T4_CONFIG)
    Eeprom.write(385 + id * nextRelay, 5, configuration.timeToOff);
  #elif defined(T5_CONFIG)
    Eeprom.write(463, 4, configuration.timeToOff);
  #endif

  #if !defined(T5_CONFIG)

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
    Eeprom.writeUInt8(377, configuration.statePowerOn);
  #elif defined(T1_CONFIG)
    Eeprom.writeUInt8(404, configuration.statePowerOn);
  #elif defined(T2_CONFIG)
    Eeprom.writeUInt8(412, configuration.statePowerOn);
  #elif defined(T3_CONFIG)
    Eeprom.writeUInt8(384 + id * nextRelay, configuration.statePowerOn);
  #elif defined(T4_CONFIG)
    Eeprom.writeUInt8(390 + id * nextRelay, configuration.statePowerOn);
  #elif defined(T6_CONFIG)
    Eeprom.writeUInt8(376, configuration.statePowerOn);
  #endif

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
    Eeprom.write(378, 16, configuration.name);
  #elif defined(T1_CONFIG)
    Eeprom.write(405, 16, configuration.name);
  #elif defined(T2_CONFIG)
    Eeprom.write(413, 16, configuration.name);
  #elif defined(T3_CONFIG)
    Eeprom.write(385 + id * nextRelay, 16, configuration.name);
  #elif defined(T4_CONFIG)
    Eeprom.write(391 + id * nextRelay, 16, configuration.name);
  #elif defined(T6_CONFIG)
    Eeprom.write(377, 16, configuration.name);
  #endif

  #if defined(T0_CONFIG) || defined(T0_SHELLY_1_CONFIG)
    Eeprom.writeUInt8(394, configuration.stateMQTTConnected);
  #elif defined(T1_CONFIG)
    Eeprom.writeUInt8(421, configuration.stateMQTTConnected);
  #elif defined(T2_CONFIG)
    Eeprom.writeUInt8(429, configuration.stateMQTTConnected);
  #elif defined(T3_CONFIG)
    Eeprom.writeUInt8(401 + id * nextRelay, configuration.stateMQTTConnected);
  #elif defined(T4_CONFIG)
    Eeprom.writeUInt8(407 + id * nextRelay, configuration.stateMQTTConnected);
  #elif defined(T6_CONFIG)
    Eeprom.writeUInt8(393, configuration.stateMQTTConnected);
  #endif

  #if defined(T0_CONFIG)
    Eeprom.writeUInt8(421, configuration.ledID);
  #elif defined(T1_CONFIG)
    Eeprom.writeUInt8(442, configuration.ledID);
  #elif defined(T2_CONFIG)
    Eeprom.writeUInt8(463, configuration.ledID);
  #elif defined(T3_CONFIG)
    Eeprom.writeUInt8(618 + id, configuration.ledID);
  #elif defined(T4_CONFIG)
    Eeprom.writeUInt8(531 + id, configuration.ledID);
  #elif defined(T6_CONFIG)
    Eeprom.writeUInt8(394, configuration.ledID);
  #endif

  #if !defined(T6_CONFIG)
    Eeprom.write(930 + 6 * id, 6, (long)configuration.idx);
  #else
    Eeprom.write(920, 6, (long)configuration.idx);
  #endif

  #if defined(T1_CONFIG)
    Eeprom.write(436, 3, configuration.thermalProtection);
  #elif defined(T2_CONFIG)
    Eeprom.write(457, 3, configuration.thermalProtection);
  #endif

  #endif
  */
}

SWITCH AFEDataAccess::getSwitchConfiguration(uint8_t id) {
  SWITCH configuration;

  char fileName[18];
  sprintf(fileName, "cfg-switch-%d.json", id);

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: " << fileName << " : ";
#endif

  File configFile = SPIFFS.open(fileName, "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<200> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif

      configuration.gpio = doc["gpio"].as<unsigned short>();
      configuration.type = doc["type"].as<unsigned short>();
      configuration.sensitiveness = doc["sensitiveness"].as<unsigned int>();
      configuration.functionality = doc["functionality"].as<unsigned short>();
      configuration.relayID = doc["relayID"].as<unsigned short>();
      sprintf(configuration.mqtt.topic, doc["MQTTTopic"].as<char *>());
      configuration.domoticz.idx = doc["idx"].as<unsigned long>();

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif

  return configuration;
}
void AFEDataAccess::saveConfiguration(uint8_t id, SWITCH configuration) {
  char fileName[18];
  sprintf(fileName, "cfg-switch-%d.json", id);

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: " << fileName << " : ";
#endif

  File configFile = SPIFFS.open(fileName, "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<200> doc;

    doc["gpio"] = configuration.gpio;
    doc["type"] = configuration.type;
    doc["sensitiveness"] = configuration.sensitiveness;
    doc["functionality"] = configuration.functionality;
    doc["relayID"] = configuration.relayID;
    doc["idx"] = configuration.domoticz.idx;
    doc["MQTTTopic"] = configuration.mqtt.topic;

    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}

#ifdef CONFIG_HARDWARE_DS18B20
DS18B20 AFEDataAccess::getSensorConfiguration() {
  DS18B20 configuration;
  configuration.gpio = Eeprom.readUInt8(370);
  configuration.correction = Eeprom.read(371, 5).toFloat();
  configuration.interval = Eeprom.read(376, 5).toInt();
  configuration.unit = Eeprom.readUInt8(381);
  configuration.sendOnlyChanges = Eeprom.read(446);
  configuration.idx = Eeprom.read(936, 6).toInt();
  return configuration;
}
void AFEDataAccess::saveConfiguration(DS18B20 configuration) {
  Eeprom.writeUInt8(370, configuration.gpio);
  Eeprom.write(371, 5, (float)configuration.correction);
  Eeprom.write(376, 5, (long)configuration.interval);
  Eeprom.writeUInt8(381, configuration.unit);
  Eeprom.write(446, configuration.sendOnlyChanges);
  Eeprom.write(936, 6, (long)configuration.idx);
}
#endif

#ifdef CONFIG_HARDWARE_DHXX
DH AFEDataAccess::getSensorConfiguration() {
  DH configuration;
#if defined(T2_CONFIG)
  configuration.gpio = Eeprom.readUInt8(370);
  configuration.type = Eeprom.readUInt8(371);
  configuration.interval = Eeprom.read(372, 5).toInt();
  configuration.temperature.unit = Eeprom.readUInt8(377);
  configuration.temperature.correction = Eeprom.read(378, 4).toFloat();
  configuration.humidity.correction = Eeprom.read(387, 3).toFloat();
  configuration.temperatureIdx = Eeprom.read(936, 6).toInt();
  configuration.humidityIdx = Eeprom.read(942, 6).toInt();
  configuration.temperatureAndHumidityIdx = Eeprom.read(948, 6).toInt();
  configuration.sendOnlyChanges = Eeprom.read(467);
  configuration.publishHeatIndex = Eeprom.read(974);
  configuration.publishDewPoint = Eeprom.read(382);
#else
  configuration.gpio = Eeprom.readUInt8(377);
  configuration.type = Eeprom.readUInt8(378);
  configuration.interval = Eeprom.read(379, 5).toInt();
  configuration.temperature.unit = Eeprom.readUInt8(384);
  configuration.temperature.correction = Eeprom.read(385, 4).toFloat();
  configuration.humidity.correction = Eeprom.read(394, 3).toFloat();
  configuration.temperatureIdx = Eeprom.read(954, 6).toInt();
  configuration.humidityIdx = Eeprom.read(960, 6).toInt();
  configuration.temperatureAndHumidityIdx = Eeprom.read(966, 6).toInt();
  configuration.sendOnlyChanges = Eeprom.read(397);
  configuration.publishHeatIndex = Eeprom.read(990);
  configuration.publishDewPoint = Eeprom.read(389);
#endif

  return configuration;
}
void AFEDataAccess::saveConfiguration(DH configuration) {
#if defined(T2_CONFIG)
  Eeprom.writeUInt8(370, configuration.gpio);
  Eeprom.writeUInt8(371, configuration.type);
  Eeprom.write(372, 5, (long)configuration.interval);
  Eeprom.writeUInt8(377, configuration.temperature.unit);
  Eeprom.write(378, 4, (float)configuration.temperature.correction);
  Eeprom.write(387, 3, (float)configuration.humidity.correction);
  Eeprom.write(936, 6, (long)configuration.temperatureIdx);
  Eeprom.write(942, 6, (long)configuration.humidityIdx);
  Eeprom.write(948, 6, (long)configuration.temperatureAndHumidityIdx);
  Eeprom.write(467, configuration.sendOnlyChanges);
  Eeprom.write(974, configuration.publishHeatIndex);
  Eeprom.write(382, configuration.publishDewPoint);
#else
  Eeprom.writeUInt8(377, configuration.gpio);
  Eeprom.writeUInt8(378, configuration.type);
  Eeprom.write(379, 5, (long)configuration.interval);
  Eeprom.writeUInt8(384, configuration.temperature.unit);
  Eeprom.write(385, 4, (float)configuration.temperature.correction);
  Eeprom.write(394, 3, (float)configuration.humidity.correction);
  Eeprom.write(954, 6, (long)configuration.temperatureIdx);
  Eeprom.write(960, 6, (long)configuration.humidityIdx);
  Eeprom.write(966, 6, (long)configuration.temperatureAndHumidityIdx);
  Eeprom.write(397, configuration.sendOnlyChanges);
  Eeprom.write(990, configuration.publishHeatIndex);
  Eeprom.write(389, configuration.publishDewPoint);
#endif
}
#endif

/* T3: PIR */
#if defined(T3_CONFIG)
PIR AFEDataAccess::getPIRConfiguration(uint8_t id) {
  PIR configuration;
  MQTT configurationMQTT;
  uint8_t nextPIR = 27;
  configuration.gpio = Eeprom.readUInt8(506 + id * nextPIR);

  Eeprom.read(507 + id * nextPIR, 16)
      .toCharArray(configuration.name, sizeof(configuration.name));

  configuration.ledId = Eeprom.readUInt8(524 + id * nextPIR);
  configuration.relayId = Eeprom.readUInt8(525 + id * nextPIR);
  configuration.howLongKeepRelayOn = Eeprom.read(526 + id * nextPIR, 5).toInt();
  configuration.invertRelayState = Eeprom.read(531 + id * nextPIR);

  configuration.outputDefaultState = Eeprom.readUInt8(613 + id);
  configuration.idx = Eeprom.read(954 + id * 6, 6).toInt();

  Eeprom.read(334, 32).toCharArray(configurationMQTT.topic,
                                   sizeof(configurationMQTT.topic));

  sprintf(configuration.mqttTopic, "%s%s/", configurationMQTT.topic,
          configuration.name);

  return configuration;
}
void AFEDataAccess::saveConfiguration(uint8_t id, PIR configuration) {
  uint8_t nextPIR = 27;
  Eeprom.writeUInt8(506 + id * nextPIR, configuration.gpio);
  Eeprom.write(507 + id * nextPIR, 16, configuration.name);
  Eeprom.writeUInt8(524 + id * nextPIR, configuration.ledId);
  Eeprom.writeUInt8(525 + id * nextPIR, configuration.relayId);
  Eeprom.write(526 + id * nextPIR, 5, (long)configuration.howLongKeepRelayOn);
  Eeprom.write(531 + id * nextPIR, configuration.invertRelayState);

  Eeprom.writeUInt8(613 + id, configuration.outputDefaultState);
  Eeprom.write(954 + id, 6, (long)configuration.idx);
}
#endif

#if defined(T5_CONFIG)
CONTACTRON AFEDataAccess::getContactronConfiguration(uint8_t id) {
  CONTACTRON configuration;
  uint8_t nextContactron = 24;
  MQTT configurationMQTT;

  configuration.gpio = Eeprom.readUInt8(415 + id * nextContactron);
  configuration.outputDefaultState =
      Eeprom.readUInt8(416 + id * nextContactron);
  configuration.ledID = Eeprom.readUInt8(417 + id * nextContactron);
  configuration.bouncing = Eeprom.read(418 + id * nextContactron, 4).toInt();

  Eeprom.read(422 + id * nextContactron, 16)
      .toCharArray(configuration.name, sizeof(configuration.name));

  Eeprom.read(334, 32).toCharArray(configurationMQTT.topic,
                                   sizeof(configurationMQTT.topic));

  sprintf(configuration.mqttTopic, "%s%s/", configurationMQTT.topic,
          configuration.name);

  configuration.idx = Eeprom.read(942 + id * 6, 6).toInt();

  return configuration;
}
void AFEDataAccess::saveConfiguration(uint8_t id, CONTACTRON configuration) {
  uint8_t nextContactron = 24;
  Eeprom.writeUInt8(415 + id * nextContactron, configuration.gpio);
  Eeprom.writeUInt8(416 + id * nextContactron,
                    configuration.outputDefaultState);
  Eeprom.writeUInt8(417 + id * nextContactron, configuration.ledID);
  Eeprom.write(418 + id * nextContactron, 4, (long)configuration.bouncing);
  Eeprom.write(422 + id * nextContactron, 16, configuration.name);
  Eeprom.write(942 + id * 6, 6, (long)configuration.idx);
}

GATE AFEDataAccess::getGateConfiguration() {
  GATE configuration;
  for (uint8_t i = 0; i < sizeof(configuration.state); i++) {
    configuration.state[i] = Eeprom.readUInt8(467 + i);
  }
  configuration.idx = Eeprom.read(936, 6).toInt();
  return configuration;
}
void AFEDataAccess::saveConfiguration(GATE configuration) {
  for (uint8_t i = 0; i < sizeof(configuration.state); i++) {
    Eeprom.writeUInt8(467 + i, configuration.state[i]);
  }
  Eeprom.write(936, 6, (long)configuration.idx);
}

uint8_t AFEDataAccess::getGateState() { return Eeprom.readUInt8(471); }

void AFEDataAccess::saveGateState(uint8_t state) {
  Eeprom.writeUInt8(471, state);
}
#endif

#ifdef CONFIG_FUNCTIONALITY_REGULATOR
void AFEDataAccess::saveConfiguration(REGULATOR configuration, uint8_t type) {

  if (type == THERMOSTAT_REGULATOR) {
    saveRegulatorState(configuration.enabled, THERMOSTAT_REGULATOR);
  } else {
    saveRegulatorState(configuration.enabled, HUMIDISTAT_REGULATOR);
  }

#if defined(T1_CONFIG)
  Eeprom.write(423, 5, configuration.turnOn);
  Eeprom.write(428, 5, configuration.turnOff);
  Eeprom.write(433, configuration.turnOnAbove);
  Eeprom.write(434, configuration.turnOffAbove);
#else
  uint8_t index = type == THERMOSTAT_REGULATOR ? 0 : 13;
  Eeprom.write(431 + index, 5, configuration.turnOn);
  Eeprom.write(436 + index, 5, configuration.turnOff);
  Eeprom.write(441 + index, configuration.turnOnAbove);
  Eeprom.write(442 + index, configuration.turnOffAbove);

#endif
}

boolean AFEDataAccess::isRegulatorEnabled(uint8_t type) {
  if (type == THERMOSTAT_REGULATOR) {
#if defined(T1_CONFIG)
    return Eeprom.read(435);
#else
    return Eeprom.read(443);
#endif
  } else {
    return Eeprom.read(456);
  }
}

void AFEDataAccess::saveRegulatorState(boolean state, uint8_t type) {
  if (type == THERMOSTAT_REGULATOR) {
#if defined(T1_CONFIG)
    Eeprom.write(435, state);
#else
    Eeprom.write(443, state);
#endif
  } else {
    Eeprom.write(456, state);
  }
}
#endif

void AFEDataAccess::saveVersion(const char *version) {
  FIRMWARE configuration = getFirmwareConfiguration();
  sprintf(configuration.version, version);
  saveConfiguration(configuration);
}

/* Relay state methods*/
#if !defined(T5_CONFIG)
boolean AFEDataAccess::getRelayState(uint8_t id) {
  boolean state = false;
  char fileName[23];
  sprintf(fileName, "cfg-relay-state-%d.json", id);

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: " << fileName << " : ";
#endif

  File configFile = SPIFFS.open(fileName, "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<50> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif
      state = doc["state"].as<bool>();

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif
  return state;
}
void AFEDataAccess::saveRelayState(uint8_t id, boolean state) {
  char fileName[23];
  sprintf(fileName, "cfg-relay-state-%d.json", id);

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: " << fileName << " : ";
#endif

  File configFile = SPIFFS.open(fileName, "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<50> doc;

    doc["state"] = state;

    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}
#endif /* End: Relay */

uint8_t AFEDataAccess::getDeviceMode() {
  boolean mode = MODE_FIRST_TIME_LAUNCH;
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-device-mode.json : ";
#endif

  File configFile = SPIFFS.open("cfg-device-mode.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<50> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
      Serial << endl;
#endif
      mode = doc["mode"].as<unsigned short>();
#ifdef DEBUG
      Serial << "success";
#endif
    }
#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();

  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif

  return mode;
}
void AFEDataAccess::saveDeviceMode(uint8_t mode) {
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-device-mode.json : ";
#endif

  File configFile = SPIFFS.open("cfg-device-mode.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<50> doc;
    doc["mode"] = mode;
#ifdef DEBUG
    uint16_t fileSize =
#endif
        serializeJson(doc, configFile);
#ifdef DEBUG
    Serial << endl
           << (fileSize == 0 ? "ERROR: while writing a file. Size="
                             : "File size=")
           << fileSize << endl;
#endif

#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}

#ifdef CONFIG_HARDWARE_LED
uint8_t AFEDataAccess::getSystemLedID() {
  uint8_t id = 0;

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-system-led.json : ";
#endif

  File configFile = SPIFFS.open("cfg-system-led.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<50> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif
      id = doc["id"].as<unsigned short>();

#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif
  return id;
}
void AFEDataAccess::saveSystemLedID(uint8_t id) {
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-system-led.json : ";
#endif

  File configFile = SPIFFS.open("cfg-system-led.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<50> doc;

    doc["id"] = id;

    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
}
#endif

void AFEDataAccess::saveAPI(uint8_t apiID, boolean state) {
  DEVICE configuration = getDeviceConfiguration();
  if (apiID == API_HTTP) {
    configuration.api.http = state;
  } else if (apiID == API_MQTT) {
    configuration.api.mqtt = state;
  } else if (apiID == API_DOMOTICZ) {
    configuration.api.domoticz = state;
    if (state) {
      configuration.api.http = true;
    }
  }
  saveConfiguration(configuration);
}

#ifdef CONFIG_HARDWARE_HPMA115S0
HPMA115S0 AFEDataAccess::getHPMA115S0SensorConfiguration() {
  HPMA115S0 configuration;
  configuration.interval = Eeprom.read(414, 5).toInt();
  configuration.timeToMeasure = Eeprom.read(419, 3).toInt();
  configuration.idx.pm25 = Eeprom.read(926, 6).toInt();
  configuration.idx.pm10 = Eeprom.read(932, 6).toInt();
  return configuration;
}
void AFEDataAccess::saveConfiguration(HPMA115S0 configuration) {
  Eeprom.write(414, 5, (long)configuration.interval);
  Eeprom.write(419, 3, (long)configuration.timeToMeasure);
  Eeprom.write(926, 6, (long)configuration.idx.pm25);
  Eeprom.write(932, 6, (long)configuration.idx.pm10);
}
#endif

#ifdef CONFIG_HARDWARE_UART
SERIALPORT AFEDataAccess::getSerialPortConfiguration() {
  SERIALPORT configuration;
  configuration.RXD = Eeprom.readUInt8(411);
  configuration.TXD = Eeprom.readUInt8(412);
  return configuration;
}
void AFEDataAccess::saveConfiguration(SERIALPORT configuration) {
  Eeprom.writeUInt8(411, configuration.RXD);
  Eeprom.writeUInt8(412, configuration.TXD);
}
#endif

#ifdef CONFIG_HARDWARE_BMX80
BMx80 AFEDataAccess::getBMx80SensorConfiguration() {
  BMx80 configuration;
  configuration.interval = Eeprom.read(423, 5).toInt();
  configuration.i2cAddress = Eeprom.readUInt8(428);
  configuration.idx.temperatureHumidityPressure = Eeprom.read(938, 6).toInt();
  configuration.idx.gasResistance = Eeprom.read(944, 6).toInt();
  configuration.idx.temperature = Eeprom.read(950, 6).toInt();
  configuration.idx.humidity = Eeprom.read(956, 6).toInt();
  configuration.idx.pressure = Eeprom.read(962, 6).toInt();
  return configuration;
}
void AFEDataAccess::saveConfiguration(BMx80 configuration) {
  Eeprom.write(423, 5, (long)configuration.interval);
  Eeprom.writeUInt8(428, configuration.i2cAddress);
  Eeprom.write(938, 6, (long)configuration.idx.temperatureHumidityPressure);
  Eeprom.write(944, 6, (long)configuration.idx.gasResistance);
  Eeprom.write(950, 6, (long)configuration.idx.temperature);
  Eeprom.write(956, 6, (long)configuration.idx.humidity);
  Eeprom.write(962, 6, (long)configuration.idx.pressure);
}
#endif

#ifdef CONFIG_HARDWARE_BH1750
BH1750 AFEDataAccess::getBH1750SensorConfiguration() {
  BH1750 configuration;
  configuration.interval = Eeprom.read(430, 5).toInt();
  configuration.i2cAddress = Eeprom.readUInt8(435);
  configuration.mode = Eeprom.readUInt8(436);
  configuration.idx = Eeprom.read(968, 6).toInt();
  return configuration;
}
void AFEDataAccess::saveConfiguration(BH1750 configuration) {
  Eeprom.write(430, 5, (long)configuration.interval);
  Eeprom.writeUInt8(435, configuration.i2cAddress);
  Eeprom.writeUInt8(436, configuration.mode);
  Eeprom.write(968, 6, (long)configuration.idx);
}
#endif

#ifdef CONFIG_HARDWARE_ADC_VCC

ADCINPUT AFEDataAccess::getADCInputConfiguration() {
  ADCINPUT configuration;

#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Reading File -------------------";
  Serial << endl << "Opening file: cfg-analog-input.json : ";
#endif

  File configFile = SPIFFS.open("cfg-analog-input.json", "r");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Reading JSON : ";
#endif

    size_t size = configFile.size();
    std::unique_ptr<char[]> buf(new char[size]);

    StaticJsonDocument<300> doc;
    DeserializationError error = deserializeJson(doc, configFile);
    if (!error) {
#ifdef DEBUG
      serializeJson(doc, Serial);
#endif
      configuration.gpio = doc["gpio"].as<unsigned short>();
      configuration.interval = doc["interval"].as<unsigned int>();
      configuration.numberOfSamples =
          doc["numberOfSamples"].as<unsigned short>();
      configuration.maxVCC = doc["maxVCC"].as<float>();
      sprintf(configuration.mqtt.topic, doc["mqttTopic"].as<char *>());
      configuration.domoticz.raw = doc["idx"]["raw"].as<unsigned long>();
      configuration.domoticz.percent =
          doc["idx"]["percent"].as<unsigned long>();
      configuration.domoticz.voltage =
          doc["idx"]["voltage"].as<unsigned long>();
#ifdef DEBUG
      Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif
    }

#ifdef DEBUG
    else {
      Serial << "failure";
    }
#endif

    configFile.close();
  }

#ifdef DEBUG
  else {
    Serial << "failure";
  }
  Serial << endl << "--------------------------------------------------";
#endif

  return configuration;
}
void AFEDataAccess::saveConfiguration(ADCINPUT configuration) {
#ifdef DEBUG
  Serial << endl
         << endl
         << "----------------- Writing File -------------------";
  Serial << endl << "Opening file: cfg-analog-input.json : ";
#endif

  File configFile = SPIFFS.open("cfg-analog-input.json", "w");

  if (configFile) {
#ifdef DEBUG
    Serial << "success" << endl << "Writing JSON : ";
#endif

    StaticJsonDocument<300> doc;

    JsonObject idx = doc.createNestedObject("idx");

    doc["gpio"] = configuration.gpio;
    doc["interval"] = configuration.interval;
    doc["numberOfSamples"] = configuration.numberOfSamples;
    doc["maxVCC"] = configuration.maxVCC;
    doc["mqttTopic"] = configuration.mqtt.topic;
    idx["raw"] = configuration.domoticz.raw;
    idx["percent"] = configuration.domoticz.percent;
    idx["voltage"] = configuration.domoticz.voltage;
    serializeJson(doc, configFile);
#ifdef DEBUG
    serializeJson(doc, Serial);
#endif
    configFile.close();

#ifdef DEBUG
    Serial << endl << "success" << endl << "JSON Buffer size: " << doc.size();
#endif

  }
#ifdef DEBUG
  else {
    Serial << endl << "failed to open file for writing";
  }
  Serial << endl << "--------------------------------------------------";
#endif
};
#endif

IPAddress AFEDataAccess::IPfromString(const char *address) {
  IPAddress ip;
  if (!ip.fromString(address)) {
#ifdef DEBUG
    Serial << endl
           << "ERROR: converting from IP String (" << address
           << ") to IP address";
#endif
  };
  return ip;
}
